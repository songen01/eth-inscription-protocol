syntax = "proto3";

package starknet.sync;

import "common.proto";
import "propagation.proto";

message Request {
  oneof request {
    GetBlockHeaders get_block_headers = 1;
    GetBlockBodies get_block_bodies = 2;
    GetStateDiffs get_state_diffs = 3;
    GetClasses get_classes = 4;
    Status status = 5;
  }
}

message Response {
  oneof response {
    BlockHeaders block_headers = 1;
    BlockBodies block_bodies = 2;
    StateDiffs state_diffs = 3;
    Classes classes = 4;
    Status status = 5;
  }
}

enum Direction {
  FORWARD = 0;
  BACKWARD = 1;
}

// Retrieve at most `count` block headers staring at `start_block`
// and then moving to the next or previous blocks depending on `direction`.
// Any single reply must not exceed `size_limit`.
//
// TODO exact semantics for `size_limit` in all request types
message GetBlockHeaders {
  uint64 start_block = 1;
  uint64 count = 2;
  uint64 size_limit = 3; // limit on size of returned messages
  Direction direction = 4;
}

message BlockHeaders { repeated starknet.common.BlockHeader headers = 1; }

message GetBlockBodies {
  starknet.common.FieldElement start_block = 1;
  uint64 count = 2;
  uint64 size_limit = 3;
  Direction direction = 4;
}

message BlockBodies { repeated starknet.common.BlockBody block_bodies = 2; }

message GetStateDiffs {
  starknet.common.FieldElement start_block = 1;
  uint64 count = 2;
  uint64 size_limit = 3;
  Direction direction = 4;
}

message StateDiffs {
  message BlockStateUpdateWithHash {
    starknet.common.FieldElement block_hash = 1;
    starknet.propagation.BlockStateUpdate state_update = 2;
    // TODO: temporary workaround until proto files updated
    // according to the spec
    starknet.common.FieldElement state_commitment = 3;
    starknet.common.FieldElement parent_state_commitment = 4;
  }

  repeated BlockStateUpdateWithHash block_state_updates = 2;
}

message Status {
  uint64 height = 1;
  starknet.common.FieldElement hash = 2;
  starknet.common.FieldElement chain_id = 3;
}

message GetClasses {
  repeated starknet.common.FieldElement class_hashes = 1;
  uint64 size_limit = 2;
}

message Classes {
  repeated starknet.common.RawClass classes = 1;
}
