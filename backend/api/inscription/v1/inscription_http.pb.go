// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.5
// source: inscription/v1/inscription.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInscriptionGetFollowTweet = "/api.inscription.v1.Inscription/GetFollowTweet"
const OperationInscriptionGetFollower = "/api.inscription.v1.Inscription/GetFollower"
const OperationInscriptionGetGroup = "/api.inscription.v1.Inscription/GetGroup"
const OperationInscriptionGetGroupMessage = "/api.inscription.v1.Inscription/GetGroupMessage"
const OperationInscriptionGetMessage = "/api.inscription.v1.Inscription/GetMessage"
const OperationInscriptionGetMessageByHash = "/api.inscription.v1.Inscription/GetMessageByHash"
const OperationInscriptionGetMessageWindow = "/api.inscription.v1.Inscription/GetMessageWindow"
const OperationInscriptionGetProfile = "/api.inscription.v1.Inscription/GetProfile"
const OperationInscriptionGetTweet = "/api.inscription.v1.Inscription/GetTweet"
const OperationInscriptionGetTweetByAddress = "/api.inscription.v1.Inscription/GetTweetByAddress"

type InscriptionHTTPServer interface {
	GetFollowTweet(context.Context, *GetFollowTweetReq) (*TweetResponse, error)
	GetFollower(context.Context, *ByAddress) (*GetFollowerResponse, error)
	GetGroup(context.Context, *ByAddress) (*SwiftResponses, error)
	GetGroupMessage(context.Context, *GetGroupMessageReq) (*GetMessageResponse, error)
	GetMessage(context.Context, *GetMessageReq) (*GetMessageResponse, error)
	GetMessageByHash(context.Context, *GetMessageByHashReq) (*SwiftResponse, error)
	GetMessageWindow(context.Context, *GetMessageWindowReq) (*MessageWindow, error)
	GetProfile(context.Context, *ByAddress) (*SwiftResponse, error)
	GetTweet(context.Context, *GetTweetReq) (*TweetResponse, error)
	GetTweetByAddress(context.Context, *GetTweetByAddressReq) (*TweetResponse, error)
}

func RegisterInscriptionHTTPServer(s *http.Server, srv InscriptionHTTPServer) {
	r := s.Route("/")
	r.GET("/api/profile", _Inscription_GetProfile0_HTTP_Handler(srv))
	r.GET("/api/group", _Inscription_GetGroup0_HTTP_Handler(srv))
	r.GET("/api/message_window", _Inscription_GetMessageWindow0_HTTP_Handler(srv))
	r.GET("/api/message", _Inscription_GetMessage0_HTTP_Handler(srv))
	r.GET("/api/message/{hash}", _Inscription_GetMessageByHash0_HTTP_Handler(srv))
	r.GET("/api/group_message", _Inscription_GetGroupMessage0_HTTP_Handler(srv))
	r.GET("/api/tweet", _Inscription_GetTweet0_HTTP_Handler(srv))
	r.GET("/api/follow_tweet", _Inscription_GetFollowTweet0_HTTP_Handler(srv))
	r.GET("/api/tweet/{address}", _Inscription_GetTweetByAddress0_HTTP_Handler(srv))
	r.GET("/api/follow", _Inscription_GetFollower0_HTTP_Handler(srv))
}

func _Inscription_GetProfile0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ByAddress
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*ByAddress))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwiftResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetGroup0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ByAddress
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*ByAddress))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwiftResponses)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetMessageWindow0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageWindowReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetMessageWindow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessageWindow(ctx, req.(*GetMessageWindowReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageWindow)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetMessage0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessage(ctx, req.(*GetMessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetMessageByHash0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageByHashReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetMessageByHash)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessageByHash(ctx, req.(*GetMessageByHashReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwiftResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetGroupMessage0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupMessageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetGroupMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroupMessage(ctx, req.(*GetGroupMessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetTweet0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTweetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetTweet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTweet(ctx, req.(*GetTweetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TweetResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetFollowTweet0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowTweetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetFollowTweet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowTweet(ctx, req.(*GetFollowTweetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TweetResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetTweetByAddress0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTweetByAddressReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetTweetByAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTweetByAddress(ctx, req.(*GetTweetByAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TweetResponse)
		return ctx.Result(200, reply)
	}
}

func _Inscription_GetFollower0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ByAddress
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetFollower)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollower(ctx, req.(*ByAddress))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowerResponse)
		return ctx.Result(200, reply)
	}
}

type InscriptionHTTPClient interface {
	GetFollowTweet(ctx context.Context, req *GetFollowTweetReq, opts ...http.CallOption) (rsp *TweetResponse, err error)
	GetFollower(ctx context.Context, req *ByAddress, opts ...http.CallOption) (rsp *GetFollowerResponse, err error)
	GetGroup(ctx context.Context, req *ByAddress, opts ...http.CallOption) (rsp *SwiftResponses, err error)
	GetGroupMessage(ctx context.Context, req *GetGroupMessageReq, opts ...http.CallOption) (rsp *GetMessageResponse, err error)
	GetMessage(ctx context.Context, req *GetMessageReq, opts ...http.CallOption) (rsp *GetMessageResponse, err error)
	GetMessageByHash(ctx context.Context, req *GetMessageByHashReq, opts ...http.CallOption) (rsp *SwiftResponse, err error)
	GetMessageWindow(ctx context.Context, req *GetMessageWindowReq, opts ...http.CallOption) (rsp *MessageWindow, err error)
	GetProfile(ctx context.Context, req *ByAddress, opts ...http.CallOption) (rsp *SwiftResponse, err error)
	GetTweet(ctx context.Context, req *GetTweetReq, opts ...http.CallOption) (rsp *TweetResponse, err error)
	GetTweetByAddress(ctx context.Context, req *GetTweetByAddressReq, opts ...http.CallOption) (rsp *TweetResponse, err error)
}

type InscriptionHTTPClientImpl struct {
	cc *http.Client
}

func NewInscriptionHTTPClient(client *http.Client) InscriptionHTTPClient {
	return &InscriptionHTTPClientImpl{client}
}

func (c *InscriptionHTTPClientImpl) GetFollowTweet(ctx context.Context, in *GetFollowTweetReq, opts ...http.CallOption) (*TweetResponse, error) {
	var out TweetResponse
	pattern := "/api/follow_tweet"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetFollowTweet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetFollower(ctx context.Context, in *ByAddress, opts ...http.CallOption) (*GetFollowerResponse, error) {
	var out GetFollowerResponse
	pattern := "/api/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetFollower))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetGroup(ctx context.Context, in *ByAddress, opts ...http.CallOption) (*SwiftResponses, error) {
	var out SwiftResponses
	pattern := "/api/group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetGroupMessage(ctx context.Context, in *GetGroupMessageReq, opts ...http.CallOption) (*GetMessageResponse, error) {
	var out GetMessageResponse
	pattern := "/api/group_message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetGroupMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetMessage(ctx context.Context, in *GetMessageReq, opts ...http.CallOption) (*GetMessageResponse, error) {
	var out GetMessageResponse
	pattern := "/api/message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetMessageByHash(ctx context.Context, in *GetMessageByHashReq, opts ...http.CallOption) (*SwiftResponse, error) {
	var out SwiftResponse
	pattern := "/api/message/{hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetMessageByHash))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetMessageWindow(ctx context.Context, in *GetMessageWindowReq, opts ...http.CallOption) (*MessageWindow, error) {
	var out MessageWindow
	pattern := "/api/message_window"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetMessageWindow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetProfile(ctx context.Context, in *ByAddress, opts ...http.CallOption) (*SwiftResponse, error) {
	var out SwiftResponse
	pattern := "/api/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetTweet(ctx context.Context, in *GetTweetReq, opts ...http.CallOption) (*TweetResponse, error) {
	var out TweetResponse
	pattern := "/api/tweet"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetTweet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) GetTweetByAddress(ctx context.Context, in *GetTweetByAddressReq, opts ...http.CallOption) (*TweetResponse, error) {
	var out TweetResponse
	pattern := "/api/tweet/{address}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetTweetByAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
