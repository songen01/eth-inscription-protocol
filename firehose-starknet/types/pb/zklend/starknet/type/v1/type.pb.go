// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v4.22.2
// source: zklend/starknet/type/v1/type.proto

package pbstarknet

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransactionType int32

const (
	TransactionType_DECLARE         TransactionType = 0
	TransactionType_DEPLOY          TransactionType = 1
	TransactionType_DEPLOY_ACCOUNT  TransactionType = 2
	TransactionType_INVOKE_FUNCTION TransactionType = 3
	TransactionType_L1_HANDLER      TransactionType = 4
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "DECLARE",
		1: "DEPLOY",
		2: "DEPLOY_ACCOUNT",
		3: "INVOKE_FUNCTION",
		4: "L1_HANDLER",
	}
	TransactionType_value = map[string]int32{
		"DECLARE":         0,
		"DEPLOY":          1,
		"DEPLOY_ACCOUNT":  2,
		"INVOKE_FUNCTION": 3,
		"L1_HANDLER":      4,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_zklend_starknet_type_v1_type_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_zklend_starknet_type_v1_type_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0}
}

type BlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash           string                          `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber         uint64                          `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasPrice            *string                         `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3,oneof" json:"gas_price,omitempty"`
	ParentBlockHash     string                          `protobuf:"bytes,4,opt,name=parent_block_hash,json=parentBlockHash,proto3" json:"parent_block_hash,omitempty"`
	SequencerAddress    *string                         `protobuf:"bytes,5,opt,name=sequencer_address,json=sequencerAddress,proto3,oneof" json:"sequencer_address,omitempty"`
	StateCommitment     string                          `protobuf:"bytes,6,opt,name=state_commitment,json=stateCommitment,proto3" json:"state_commitment,omitempty"`
	Status              string                          `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp           uint64                          `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransactionReceipts []*BlockData_TransactionReceipt `protobuf:"bytes,9,rep,name=transaction_receipts,json=transactionReceipts,proto3" json:"transaction_receipts,omitempty"`
	Transactions        []*Transaction                  `protobuf:"bytes,10,rep,name=transactions,proto3" json:"transactions,omitempty"`
	StarknetVersion     string                          `protobuf:"bytes,11,opt,name=starknet_version,json=starknetVersion,proto3" json:"starknet_version,omitempty"`
}

func (x *BlockData) Reset() {
	*x = BlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData) ProtoMessage() {}

func (x *BlockData) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData.ProtoReflect.Descriptor instead.
func (*BlockData) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *BlockData) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockData) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockData) GetGasPrice() string {
	if x != nil && x.GasPrice != nil {
		return *x.GasPrice
	}
	return ""
}

func (x *BlockData) GetParentBlockHash() string {
	if x != nil {
		return x.ParentBlockHash
	}
	return ""
}

func (x *BlockData) GetSequencerAddress() string {
	if x != nil && x.SequencerAddress != nil {
		return *x.SequencerAddress
	}
	return ""
}

func (x *BlockData) GetStateCommitment() string {
	if x != nil {
		return x.StateCommitment
	}
	return ""
}

func (x *BlockData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BlockData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockData) GetTransactionReceipts() []*BlockData_TransactionReceipt {
	if x != nil {
		return x.TransactionReceipts
	}
	return nil
}

func (x *BlockData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockData) GetStarknetVersion() string {
	if x != nil {
		return x.StarknetVersion
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transaction:
	//
	//	*Transaction_InvokeTransaction
	//	*Transaction_DeclareTransaction
	//	*Transaction_DeployTransaction
	//	*Transaction_DeployAccountTransaction
	//	*Transaction_L1HandlerTransaction
	Transaction isTransaction_Transaction `protobuf_oneof:"transaction"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (m *Transaction) GetTransaction() isTransaction_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *Transaction) GetInvokeTransaction() *InvokeTransaction {
	if x, ok := x.GetTransaction().(*Transaction_InvokeTransaction); ok {
		return x.InvokeTransaction
	}
	return nil
}

func (x *Transaction) GetDeclareTransaction() *DeclareTransaction {
	if x, ok := x.GetTransaction().(*Transaction_DeclareTransaction); ok {
		return x.DeclareTransaction
	}
	return nil
}

func (x *Transaction) GetDeployTransaction() *DeployTransaction {
	if x, ok := x.GetTransaction().(*Transaction_DeployTransaction); ok {
		return x.DeployTransaction
	}
	return nil
}

func (x *Transaction) GetDeployAccountTransaction() *DeployAccountTransaction {
	if x, ok := x.GetTransaction().(*Transaction_DeployAccountTransaction); ok {
		return x.DeployAccountTransaction
	}
	return nil
}

func (x *Transaction) GetL1HandlerTransaction() *L1HandlerTransaction {
	if x, ok := x.GetTransaction().(*Transaction_L1HandlerTransaction); ok {
		return x.L1HandlerTransaction
	}
	return nil
}

type isTransaction_Transaction interface {
	isTransaction_Transaction()
}

type Transaction_InvokeTransaction struct {
	InvokeTransaction *InvokeTransaction `protobuf:"bytes,1,opt,name=invoke_transaction,json=invokeTransaction,proto3,oneof"`
}

type Transaction_DeclareTransaction struct {
	DeclareTransaction *DeclareTransaction `protobuf:"bytes,2,opt,name=declare_transaction,json=declareTransaction,proto3,oneof"`
}

type Transaction_DeployTransaction struct {
	DeployTransaction *DeployTransaction `protobuf:"bytes,3,opt,name=deploy_transaction,json=deployTransaction,proto3,oneof"`
}

type Transaction_DeployAccountTransaction struct {
	DeployAccountTransaction *DeployAccountTransaction `protobuf:"bytes,4,opt,name=deploy_account_transaction,json=deployAccountTransaction,proto3,oneof"`
}

type Transaction_L1HandlerTransaction struct {
	L1HandlerTransaction *L1HandlerTransaction `protobuf:"bytes,5,opt,name=l1_handler_transaction,json=l1HandlerTransaction,proto3,oneof"`
}

func (*Transaction_InvokeTransaction) isTransaction_Transaction() {}

func (*Transaction_DeclareTransaction) isTransaction_Transaction() {}

func (*Transaction_DeployTransaction) isTransaction_Transaction() {}

func (*Transaction_DeployAccountTransaction) isTransaction_Transaction() {}

func (*Transaction_L1HandlerTransaction) isTransaction_Transaction() {}

type DeclareTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=zklend.starknet.type.v1.TransactionType" json:"type,omitempty"`
	Version           string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ClassHash         string          `protobuf:"bytes,3,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	MaxFee            string          `protobuf:"bytes,4,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Nonce             string          `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SenderAddress     string          `protobuf:"bytes,6,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	Signature         []string        `protobuf:"bytes,7,rep,name=signature,proto3" json:"signature,omitempty"`
	TransactionHash   string          `protobuf:"bytes,8,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	CompiledClassHash *string         `protobuf:"bytes,9,opt,name=compiled_class_hash,json=compiledClassHash,proto3,oneof" json:"compiled_class_hash,omitempty"`
}

func (x *DeclareTransaction) Reset() {
	*x = DeclareTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransaction) ProtoMessage() {}

func (x *DeclareTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransaction.ProtoReflect.Descriptor instead.
func (*DeclareTransaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *DeclareTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DECLARE
}

func (x *DeclareTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransaction) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeclareTransaction) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeclareTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeclareTransaction) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DeclareTransaction) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *DeclareTransaction) GetCompiledClassHash() string {
	if x != nil && x.CompiledClassHash != nil {
		return *x.CompiledClassHash
	}
	return ""
}

type DeployTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=zklend.starknet.type.v1.TransactionType" json:"type,omitempty"`
	Version             string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ContractAddress     string          `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractAddressSalt string          `protobuf:"bytes,4,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	ClassHash           string          `protobuf:"bytes,5,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	ConstructorCalldata []string        `protobuf:"bytes,6,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	TransactionHash     string          `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *DeployTransaction) Reset() {
	*x = DeployTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTransaction) ProtoMessage() {}

func (x *DeployTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTransaction.ProtoReflect.Descriptor instead.
func (*DeployTransaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *DeployTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DECLARE
}

func (x *DeployTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployTransaction) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DeployTransaction) GetContractAddressSalt() string {
	if x != nil {
		return x.ContractAddressSalt
	}
	return ""
}

func (x *DeployTransaction) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeployTransaction) GetConstructorCalldata() []string {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *DeployTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type DeployAccountTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=zklend.starknet.type.v1.TransactionType" json:"type,omitempty"`
	Version             string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ContractAddress     string          `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractAddressSalt string          `protobuf:"bytes,4,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	ClassHash           string          `protobuf:"bytes,5,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	ConstructorCalldata []string        `protobuf:"bytes,6,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	TransactionHash     string          `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	MaxFee              string          `protobuf:"bytes,8,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature           []string        `protobuf:"bytes,9,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce               string          `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DeployAccountTransaction) Reset() {
	*x = DeployAccountTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAccountTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountTransaction) ProtoMessage() {}

func (x *DeployAccountTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountTransaction.ProtoReflect.Descriptor instead.
func (*DeployAccountTransaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *DeployAccountTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DECLARE
}

func (x *DeployAccountTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAccountTransaction) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DeployAccountTransaction) GetContractAddressSalt() string {
	if x != nil {
		return x.ContractAddressSalt
	}
	return ""
}

func (x *DeployAccountTransaction) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeployAccountTransaction) GetConstructorCalldata() []string {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *DeployAccountTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *DeployAccountTransaction) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeployAccountTransaction) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeployAccountTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type InvokeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=zklend.starknet.type.v1.TransactionType" json:"type,omitempty"`
	Version            string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Calldata           []string        `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	SenderAddress      string          `protobuf:"bytes,4,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	EntryPointSelector *string         `protobuf:"bytes,5,opt,name=entry_point_selector,json=entryPointSelector,proto3,oneof" json:"entry_point_selector,omitempty"`
	EntryPointType     *string         `protobuf:"bytes,6,opt,name=entry_point_type,json=entryPointType,proto3,oneof" json:"entry_point_type,omitempty"`
	MaxFee             string          `protobuf:"bytes,7,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature          []string        `protobuf:"bytes,8,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce              *string         `protobuf:"bytes,9,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
	TransactionHash    string          `protobuf:"bytes,10,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *InvokeTransaction) Reset() {
	*x = InvokeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransaction) ProtoMessage() {}

func (x *InvokeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransaction.ProtoReflect.Descriptor instead.
func (*InvokeTransaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *InvokeTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DECLARE
}

func (x *InvokeTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransaction) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *InvokeTransaction) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *InvokeTransaction) GetEntryPointSelector() string {
	if x != nil && x.EntryPointSelector != nil {
		return *x.EntryPointSelector
	}
	return ""
}

func (x *InvokeTransaction) GetEntryPointType() string {
	if x != nil && x.EntryPointType != nil {
		return *x.EntryPointType
	}
	return ""
}

func (x *InvokeTransaction) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *InvokeTransaction) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransaction) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

func (x *InvokeTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type L1HandlerTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=zklend.starknet.type.v1.TransactionType" json:"type,omitempty"`
	Version            string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ContractAddress    string          `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EntryPointSelector string          `protobuf:"bytes,4,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	Nonce              string          `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Calldata           []string        `protobuf:"bytes,6,rep,name=calldata,proto3" json:"calldata,omitempty"`
	TransactionHash    string          `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *L1HandlerTransaction) Reset() {
	*x = L1HandlerTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1HandlerTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1HandlerTransaction) ProtoMessage() {}

func (x *L1HandlerTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1HandlerTransaction.ProtoReflect.Descriptor instead.
func (*L1HandlerTransaction) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (x *L1HandlerTransaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_DECLARE
}

func (x *L1HandlerTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *L1HandlerTransaction) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *L1HandlerTransaction) GetEntryPointSelector() string {
	if x != nil {
		return x.EntryPointSelector
	}
	return ""
}

func (x *L1HandlerTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *L1HandlerTransaction) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *L1HandlerTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type BlockData_TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualFee             *string                                          `protobuf:"bytes,1,opt,name=actual_fee,json=actualFee,proto3,oneof" json:"actual_fee,omitempty"`
	Events                []*BlockData_TransactionReceipt_Event            `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	ExecutionResources    *BlockData_TransactionReceipt_ExecutionResources `protobuf:"bytes,3,opt,name=execution_resources,json=executionResources,proto3" json:"execution_resources,omitempty"`
	L1ToL2ConsumedMessage *BlockData_TransactionReceipt_L1ToL2Message      `protobuf:"bytes,4,opt,name=l1_to_l2_consumed_message,json=l1ToL2ConsumedMessage,proto3" json:"l1_to_l2_consumed_message,omitempty"`
	L2ToL1Messages        []*BlockData_TransactionReceipt_L2ToL1Message    `protobuf:"bytes,5,rep,name=l2_to_l1_messages,json=l2ToL1Messages,proto3" json:"l2_to_l1_messages,omitempty"`
	TransactionHash       string                                           `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex      uint64                                           `protobuf:"varint,7,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	ExecutionStatus       string                                           `protobuf:"bytes,8,opt,name=execution_status,json=executionStatus,proto3" json:"execution_status,omitempty"`
	RevertError           *string                                          `protobuf:"bytes,9,opt,name=revert_error,json=revertError,proto3,oneof" json:"revert_error,omitempty"`
}

func (x *BlockData_TransactionReceipt) Reset() {
	*x = BlockData_TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt) ProtoMessage() {}

func (x *BlockData_TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BlockData_TransactionReceipt) GetActualFee() string {
	if x != nil && x.ActualFee != nil {
		return *x.ActualFee
	}
	return ""
}

func (x *BlockData_TransactionReceipt) GetEvents() []*BlockData_TransactionReceipt_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BlockData_TransactionReceipt) GetExecutionResources() *BlockData_TransactionReceipt_ExecutionResources {
	if x != nil {
		return x.ExecutionResources
	}
	return nil
}

func (x *BlockData_TransactionReceipt) GetL1ToL2ConsumedMessage() *BlockData_TransactionReceipt_L1ToL2Message {
	if x != nil {
		return x.L1ToL2ConsumedMessage
	}
	return nil
}

func (x *BlockData_TransactionReceipt) GetL2ToL1Messages() []*BlockData_TransactionReceipt_L2ToL1Message {
	if x != nil {
		return x.L2ToL1Messages
	}
	return nil
}

func (x *BlockData_TransactionReceipt) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *BlockData_TransactionReceipt) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *BlockData_TransactionReceipt) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *BlockData_TransactionReceipt) GetRevertError() string {
	if x != nil && x.RevertError != nil {
		return *x.RevertError
	}
	return ""
}

type BlockData_TransactionReceipt_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FromAddress string   `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Keys        []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BlockData_TransactionReceipt_Event) Reset() {
	*x = BlockData_TransactionReceipt_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt_Event) ProtoMessage() {}

func (x *BlockData_TransactionReceipt_Event) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt_Event.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt_Event) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *BlockData_TransactionReceipt_Event) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlockData_TransactionReceipt_Event) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *BlockData_TransactionReceipt_Event) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BlockData_TransactionReceipt_ExecutionResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuiltinInstanceCounter *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter `protobuf:"bytes,1,opt,name=builtin_instance_counter,json=builtinInstanceCounter,proto3" json:"builtin_instance_counter,omitempty"`
	NSteps                 uint64                                                                  `protobuf:"varint,2,opt,name=n_steps,json=nSteps,proto3" json:"n_steps,omitempty"`
	NMemoryHoles           uint64                                                                  `protobuf:"varint,3,opt,name=n_memory_holes,json=nMemoryHoles,proto3" json:"n_memory_holes,omitempty"`
}

func (x *BlockData_TransactionReceipt_ExecutionResources) Reset() {
	*x = BlockData_TransactionReceipt_ExecutionResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt_ExecutionResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt_ExecutionResources) ProtoMessage() {}

func (x *BlockData_TransactionReceipt_ExecutionResources) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt_ExecutionResources.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt_ExecutionResources) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *BlockData_TransactionReceipt_ExecutionResources) GetBuiltinInstanceCounter() *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter {
	if x != nil {
		return x.BuiltinInstanceCounter
	}
	return nil
}

func (x *BlockData_TransactionReceipt_ExecutionResources) GetNSteps() uint64 {
	if x != nil {
		return x.NSteps
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources) GetNMemoryHoles() uint64 {
	if x != nil {
		return x.NMemoryHoles
	}
	return 0
}

type BlockData_TransactionReceipt_L1ToL2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Payload     []string `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
	Selector    string   `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
	ToAddress   string   `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Nonce       *string  `protobuf:"bytes,5,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) Reset() {
	*x = BlockData_TransactionReceipt_L1ToL2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt_L1ToL2Message) ProtoMessage() {}

func (x *BlockData_TransactionReceipt_L1ToL2Message) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt_L1ToL2Message.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt_L1ToL2Message) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) GetPayload() []string {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *BlockData_TransactionReceipt_L1ToL2Message) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

type BlockData_TransactionReceipt_L2ToL1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Payload     []string `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
	ToAddress   string   `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
}

func (x *BlockData_TransactionReceipt_L2ToL1Message) Reset() {
	*x = BlockData_TransactionReceipt_L2ToL1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt_L2ToL1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt_L2ToL1Message) ProtoMessage() {}

func (x *BlockData_TransactionReceipt_L2ToL1Message) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt_L2ToL1Message.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt_L2ToL1Message) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *BlockData_TransactionReceipt_L2ToL1Message) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *BlockData_TransactionReceipt_L2ToL1Message) GetPayload() []string {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *BlockData_TransactionReceipt_L2ToL1Message) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

type BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputBuiltin       uint64 `protobuf:"varint,1,opt,name=output_builtin,json=outputBuiltin,proto3" json:"output_builtin,omitempty"`
	PedersenBuiltin     uint64 `protobuf:"varint,2,opt,name=pedersen_builtin,json=pedersenBuiltin,proto3" json:"pedersen_builtin,omitempty"`
	RangeCheckBuiltin   uint64 `protobuf:"varint,3,opt,name=range_check_builtin,json=rangeCheckBuiltin,proto3" json:"range_check_builtin,omitempty"`
	EcdsaBuiltin        uint64 `protobuf:"varint,4,opt,name=ecdsa_builtin,json=ecdsaBuiltin,proto3" json:"ecdsa_builtin,omitempty"`
	BitwiseBuiltin      uint64 `protobuf:"varint,5,opt,name=bitwise_builtin,json=bitwiseBuiltin,proto3" json:"bitwise_builtin,omitempty"`
	EcOpBuiltin         uint64 `protobuf:"varint,6,opt,name=ec_op_builtin,json=ecOpBuiltin,proto3" json:"ec_op_builtin,omitempty"`
	KeccakBuiltin       uint64 `protobuf:"varint,7,opt,name=keccak_builtin,json=keccakBuiltin,proto3" json:"keccak_builtin,omitempty"`
	PoseidonBuiltin     uint64 `protobuf:"varint,8,opt,name=poseidon_builtin,json=poseidonBuiltin,proto3" json:"poseidon_builtin,omitempty"`
	SegmentArenaBuiltin uint64 `protobuf:"varint,9,opt,name=segment_arena_builtin,json=segmentArenaBuiltin,proto3" json:"segment_arena_builtin,omitempty"`
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) Reset() {
	*x = BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) ProtoMessage() {}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) ProtoReflect() protoreflect.Message {
	mi := &file_zklend_starknet_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter.ProtoReflect.Descriptor instead.
func (*BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) Descriptor() ([]byte, []int) {
	return file_zklend_starknet_type_v1_type_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetOutputBuiltin() uint64 {
	if x != nil {
		return x.OutputBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetPedersenBuiltin() uint64 {
	if x != nil {
		return x.PedersenBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetRangeCheckBuiltin() uint64 {
	if x != nil {
		return x.RangeCheckBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetEcdsaBuiltin() uint64 {
	if x != nil {
		return x.EcdsaBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetBitwiseBuiltin() uint64 {
	if x != nil {
		return x.BitwiseBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetEcOpBuiltin() uint64 {
	if x != nil {
		return x.EcOpBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetKeccakBuiltin() uint64 {
	if x != nil {
		return x.KeccakBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetPoseidonBuiltin() uint64 {
	if x != nil {
		return x.PoseidonBuiltin
	}
	return 0
}

func (x *BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter) GetSegmentArenaBuiltin() uint64 {
	if x != nil {
		return x.SegmentArenaBuiltin
	}
	return 0
}

var File_zklend_starknet_type_v1_type_proto protoreflect.FileDescriptor

var file_zklend_starknet_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x22, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xed, 0x11,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x11, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x68,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a,
	0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x0d,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x7a, 0x6b, 0x6c,
	0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x19, 0x6c, 0x31, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x7a, 0x6b,
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x2e, 0x4c, 0x31, 0x54, 0x6f, 0x4c, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x15, 0x6c, 0x31, 0x54, 0x6f, 0x4c, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x6c, 0x32, 0x5f, 0x74, 0x6f,
	0x5f, 0x6c, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x4c, 0x32, 0x54, 0x6f, 0x4c, 0x31,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x32, 0x54, 0x6f, 0x4c, 0x31, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0x52, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x1a, 0x84, 0x05, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x99, 0x01,
	0x0a, 0x18, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5f, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x16, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x48, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x92, 0x03, 0x0a, 0x16, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x63,
	0x64, 0x73, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69,
	0x74, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x63, 0x4f, 0x70,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x63, 0x63, 0x61,
	0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64,
	0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x1a, 0xac, 0x01,
	0x0a, 0x0d, 0x4c, 0x31, 0x54, 0x6f, 0x4c, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x6b, 0x0a, 0x0d,
	0x4c, 0x32, 0x54, 0x6f, 0x4c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x90, 0x04,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x6b, 0x6c, 0x65,
	0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x12, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x6b,
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x18, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x16, 0x6c, 0x31,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x6b, 0x6c,
	0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x31, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf7, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x88,
	0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x11, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x9b, 0x03, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46,
	0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa8,
	0x02, 0x0a, 0x14, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x2a, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56,
	0x4f, 0x4b, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x31, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x42, 0x59,
	0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x66, 0x69, 0x72, 0x65,
	0x68, 0x6f, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x7a, 0x6b, 0x6c, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x62, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_zklend_starknet_type_v1_type_proto_rawDescOnce sync.Once
	file_zklend_starknet_type_v1_type_proto_rawDescData = file_zklend_starknet_type_v1_type_proto_rawDesc
)

func file_zklend_starknet_type_v1_type_proto_rawDescGZIP() []byte {
	file_zklend_starknet_type_v1_type_proto_rawDescOnce.Do(func() {
		file_zklend_starknet_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_zklend_starknet_type_v1_type_proto_rawDescData)
	})
	return file_zklend_starknet_type_v1_type_proto_rawDescData
}

var file_zklend_starknet_type_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zklend_starknet_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_zklend_starknet_type_v1_type_proto_goTypes = []interface{}{
	(TransactionType)(0),                                    // 0: zklend.starknet.type.v1.TransactionType
	(*BlockData)(nil),                                       // 1: zklend.starknet.type.v1.BlockData
	(*Transaction)(nil),                                     // 2: zklend.starknet.type.v1.Transaction
	(*DeclareTransaction)(nil),                              // 3: zklend.starknet.type.v1.DeclareTransaction
	(*DeployTransaction)(nil),                               // 4: zklend.starknet.type.v1.DeployTransaction
	(*DeployAccountTransaction)(nil),                        // 5: zklend.starknet.type.v1.DeployAccountTransaction
	(*InvokeTransaction)(nil),                               // 6: zklend.starknet.type.v1.InvokeTransaction
	(*L1HandlerTransaction)(nil),                            // 7: zklend.starknet.type.v1.L1HandlerTransaction
	(*BlockData_TransactionReceipt)(nil),                    // 8: zklend.starknet.type.v1.BlockData.TransactionReceipt
	(*BlockData_TransactionReceipt_Event)(nil),              // 9: zklend.starknet.type.v1.BlockData.TransactionReceipt.Event
	(*BlockData_TransactionReceipt_ExecutionResources)(nil), // 10: zklend.starknet.type.v1.BlockData.TransactionReceipt.ExecutionResources
	(*BlockData_TransactionReceipt_L1ToL2Message)(nil),      // 11: zklend.starknet.type.v1.BlockData.TransactionReceipt.L1ToL2Message
	(*BlockData_TransactionReceipt_L2ToL1Message)(nil),      // 12: zklend.starknet.type.v1.BlockData.TransactionReceipt.L2ToL1Message
	(*BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter)(nil), // 13: zklend.starknet.type.v1.BlockData.TransactionReceipt.ExecutionResources.BuiltinInstanceCounter
}
var file_zklend_starknet_type_v1_type_proto_depIdxs = []int32{
	8,  // 0: zklend.starknet.type.v1.BlockData.transaction_receipts:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt
	2,  // 1: zklend.starknet.type.v1.BlockData.transactions:type_name -> zklend.starknet.type.v1.Transaction
	6,  // 2: zklend.starknet.type.v1.Transaction.invoke_transaction:type_name -> zklend.starknet.type.v1.InvokeTransaction
	3,  // 3: zklend.starknet.type.v1.Transaction.declare_transaction:type_name -> zklend.starknet.type.v1.DeclareTransaction
	4,  // 4: zklend.starknet.type.v1.Transaction.deploy_transaction:type_name -> zklend.starknet.type.v1.DeployTransaction
	5,  // 5: zklend.starknet.type.v1.Transaction.deploy_account_transaction:type_name -> zklend.starknet.type.v1.DeployAccountTransaction
	7,  // 6: zklend.starknet.type.v1.Transaction.l1_handler_transaction:type_name -> zklend.starknet.type.v1.L1HandlerTransaction
	0,  // 7: zklend.starknet.type.v1.DeclareTransaction.type:type_name -> zklend.starknet.type.v1.TransactionType
	0,  // 8: zklend.starknet.type.v1.DeployTransaction.type:type_name -> zklend.starknet.type.v1.TransactionType
	0,  // 9: zklend.starknet.type.v1.DeployAccountTransaction.type:type_name -> zklend.starknet.type.v1.TransactionType
	0,  // 10: zklend.starknet.type.v1.InvokeTransaction.type:type_name -> zklend.starknet.type.v1.TransactionType
	0,  // 11: zklend.starknet.type.v1.L1HandlerTransaction.type:type_name -> zklend.starknet.type.v1.TransactionType
	9,  // 12: zklend.starknet.type.v1.BlockData.TransactionReceipt.events:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt.Event
	10, // 13: zklend.starknet.type.v1.BlockData.TransactionReceipt.execution_resources:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt.ExecutionResources
	11, // 14: zklend.starknet.type.v1.BlockData.TransactionReceipt.l1_to_l2_consumed_message:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt.L1ToL2Message
	12, // 15: zklend.starknet.type.v1.BlockData.TransactionReceipt.l2_to_l1_messages:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt.L2ToL1Message
	13, // 16: zklend.starknet.type.v1.BlockData.TransactionReceipt.ExecutionResources.builtin_instance_counter:type_name -> zklend.starknet.type.v1.BlockData.TransactionReceipt.ExecutionResources.BuiltinInstanceCounter
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_zklend_starknet_type_v1_type_proto_init() }
func file_zklend_starknet_type_v1_type_proto_init() {
	if File_zklend_starknet_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zklend_starknet_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAccountTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1HandlerTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt_ExecutionResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt_L1ToL2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt_L2ToL1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zklend_starknet_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData_TransactionReceipt_ExecutionResources_BuiltinInstanceCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zklend_starknet_type_v1_type_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zklend_starknet_type_v1_type_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Transaction_InvokeTransaction)(nil),
		(*Transaction_DeclareTransaction)(nil),
		(*Transaction_DeployTransaction)(nil),
		(*Transaction_DeployAccountTransaction)(nil),
		(*Transaction_L1HandlerTransaction)(nil),
	}
	file_zklend_starknet_type_v1_type_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_zklend_starknet_type_v1_type_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_zklend_starknet_type_v1_type_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_zklend_starknet_type_v1_type_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zklend_starknet_type_v1_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zklend_starknet_type_v1_type_proto_goTypes,
		DependencyIndexes: file_zklend_starknet_type_v1_type_proto_depIdxs,
		EnumInfos:         file_zklend_starknet_type_v1_type_proto_enumTypes,
		MessageInfos:      file_zklend_starknet_type_v1_type_proto_msgTypes,
	}.Build()
	File_zklend_starknet_type_v1_type_proto = out.File
	file_zklend_starknet_type_v1_type_proto_rawDesc = nil
	file_zklend_starknet_type_v1_type_proto_goTypes = nil
	file_zklend_starknet_type_v1_type_proto_depIdxs = nil
}
